{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dms_2\\\\Documents\\\\AddMustard-repos\\\\addMusatrd\\\\client\\\\src\\\\Components\\\\Buttons\\\\TiltButton.tsx\";\n/*\r\n    Project : AddMustard\r\n    Author(s) : David Charles\r\n*/\n\n//Dependencies\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { generateTiltValues } from \"../../Utilities/helpers\";\n\n//Components\nimport ImageContainer from \"../ImageContainer/ImageContainer\";\n\n//Interfaces\n\n//Styles\nimport \"./Button.scss\";\n\n//Component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TiltButton = props => {\n  //Properties\n  const buttonClass = props.data.buttonClass;\n  const buttonCopy = props.data.buttonCopy;\n  const buttonIcon = props.data.buttonIcon;\n  const buttonType = props.data.buttonType;\n  const buttonHref = props.data.buttonHref || \"\";\n  const buttonFunction = props.data.buttonFunction;\n  const tiltBackgroundColor = props.data.tiltBackgroundColor;\n\n  //Functions\n  const generateTiltButton = () => {\n    const linkClass = buttonIcon ? \"hasIcon\" : \"noIcon\";\n    if (buttonType === \"internalLink\") {\n      return /*#__PURE__*/_jsxDEV(Link, {\n        to: buttonHref,\n        className: linkClass,\n        children: [buttonIcon ? /*#__PURE__*/_jsxDEV(ImageContainer, {\n          data: {\n            imageSource: buttonIcon,\n            imageAlt: \"button Icon\",\n            imageHref: \"\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 29\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: buttonCopy\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this);\n    } else if (buttonType === \"externalLink\") {\n      return /*#__PURE__*/_jsxDEV(\"a\", {\n        href: buttonHref,\n        className: linkClass,\n        target: \"_blank\",\n        rel: \"noreferrer\",\n        children: [buttonIcon ? /*#__PURE__*/_jsxDEV(ImageContainer, {\n          data: {\n            imageSource: buttonIcon,\n            imageAlt: \"button Icon\",\n            imageHref: \"\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 29\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: buttonCopy\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this);\n    } else if (buttonType === \"function\") {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        onClick: buttonFunction,\n        className: linkClass,\n        children: [buttonIcon ? /*#__PURE__*/_jsxDEV(ImageContainer, {\n          data: {\n            imageSource: buttonIcon,\n            imageAlt: \"button Icon\",\n            imageHref: \"\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 29\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: buttonCopy\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        className: linkClass,\n        children: [buttonIcon ? /*#__PURE__*/_jsxDEV(ImageContainer, {\n          data: {\n            imageSource: buttonIcon,\n            imageAlt: \"button Icon\",\n            imageHref: \"\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 29\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: buttonCopy\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this);\n    }\n  };\n\n  //Variables\n  const TiltButtonClass = buttonClass ? \"Button TiltButton \" + buttonClass : \"Button TiltButton\";\n  const tiltValueProps = {\n    maxRotation: 4,\n    maxSkew: 4\n  };\n  const tiltValues = generateTiltValues(tiltValueProps);\n  const tiltStyle = {\n    backgroundColor: tiltBackgroundColor,\n    transform: \"rotate(\" + tiltValues.rotation + \"deg) skewX(\" + tiltValues.skew + \"deg)\"\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: TiltButtonClass,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"outer\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tilt\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"inner\",\n          style: tiltStyle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inner\",\n        children: generateTiltButton()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 9\n  }, this);\n};\n_c = TiltButton;\nexport default TiltButton;\nvar _c;\n$RefreshReg$(_c, \"TiltButton\");","map":{"version":3,"names":["React","Link","generateTiltValues","ImageContainer","TiltButton","props","buttonClass","data","buttonCopy","buttonIcon","buttonType","buttonHref","buttonFunction","tiltBackgroundColor","generateTiltButton","linkClass","imageSource","imageAlt","imageHref","TiltButtonClass","tiltValueProps","maxRotation","maxSkew","tiltValues","tiltStyle","backgroundColor","transform","rotation","skew"],"sources":["C:/Users/dms_2/Documents/AddMustard-repos/addMusatrd/client/src/Components/Buttons/TiltButton.tsx"],"sourcesContent":["/*\r\n    Project : AddMustard\r\n    Author(s) : David Charles\r\n*/\r\n\r\n//Dependencies\r\nimport React from \"react\";\r\nimport { Link, LinkProps } from \"react-router-dom\";\r\nimport { generateTiltValues } from \"../../Utilities/helpers\";\r\n\r\n//Components\r\nimport ImageContainer from \"../ImageContainer/ImageContainer\";\r\n\r\n//Interfaces\r\nimport { TiltButtonInterface, TiltButtonStyleInterface } from \"./ButtonInterfaces\";\r\nimport { TiltValueInterface, GenerateTiltValuesParametersInterface } from \"../../Utilities/helperInterfaces\";\r\n\r\n//Styles\r\nimport \"./Button.scss\";\r\n\r\n//Component\r\nconst TiltButton : React.FC<TiltButtonInterface> = (props : TiltButtonInterface) => {\r\n    //Properties\r\n    const buttonClass : string | undefined = props.data.buttonClass; \r\n    const buttonCopy : string | undefined = props.data.buttonCopy; \r\n    const buttonIcon : string | undefined = props.data.buttonIcon; \r\n    const buttonType : string | undefined = props.data.buttonType;\r\n    const buttonHref : string | LinkProps[\"to\"] = props.data.buttonHref || \"\"; \r\n    const buttonFunction : (() => void) | undefined = props.data.buttonFunction;\r\n    const tiltBackgroundColor : string | undefined = props.data.tiltBackgroundColor;\r\n\r\n    //Functions\r\n    const generateTiltButton : () => JSX.Element = () => {\r\n        const linkClass : string = buttonIcon ? \"hasIcon\" : \"noIcon\";\r\n\r\n        if (buttonType === \"internalLink\") {\r\n            return (\r\n                <Link to={buttonHref} className={linkClass}>\r\n                    {\r\n                        buttonIcon ?\r\n                            <ImageContainer data={{ imageSource: buttonIcon, imageAlt: \"button Icon\", imageHref: \"\" }} />\r\n                            :\r\n                            <></>\r\n                    }\r\n\r\n                    <span>{buttonCopy}</span>\r\n                </Link>\r\n            )\r\n\r\n        } else if (buttonType === \"externalLink\") {\r\n            return (\r\n                <a href={buttonHref} className={linkClass} target=\"_blank\" rel=\"noreferrer\">\r\n                    {\r\n                        buttonIcon ?\r\n                            <ImageContainer data={{ imageSource: buttonIcon, imageAlt: \"button Icon\", imageHref: \"\" }} />\r\n                            :\r\n                            <></>\r\n                    }\r\n\r\n                    <span>{buttonCopy}</span>\r\n                </a>\r\n            )\r\n\r\n        } else if (buttonType === \"function\") {\r\n            return (\r\n                <p onClick={buttonFunction} className={linkClass}>\r\n                    {\r\n                        buttonIcon ?\r\n                            <ImageContainer data={{ imageSource: buttonIcon, imageAlt: \"button Icon\", imageHref: \"\" }} />\r\n                            :\r\n                            <></>\r\n                    }\r\n\r\n                    <span>{buttonCopy}</span>\r\n                </p>\r\n            )\r\n\r\n        } else {\r\n            return (\r\n                <p className={linkClass}>\r\n                    {\r\n                        buttonIcon ?\r\n                            <ImageContainer data={{ imageSource: buttonIcon, imageAlt: \"button Icon\", imageHref: \"\" }} />\r\n                            :\r\n                            <></>\r\n                    }\r\n\r\n                    <span>{buttonCopy}</span>\r\n                </p>\r\n            )\r\n        }\r\n    }\r\n\r\n    //Variables\r\n    const TiltButtonClass : string = buttonClass ? \"Button TiltButton \" + buttonClass : \"Button TiltButton\";\r\n    const tiltValueProps : GenerateTiltValuesParametersInterface = {\r\n        maxRotation : 4,\r\n        maxSkew : 4\r\n    };\r\n    const tiltValues : TiltValueInterface = generateTiltValues(tiltValueProps);\r\n    const tiltStyle : TiltButtonStyleInterface = {\r\n        backgroundColor : tiltBackgroundColor,\r\n        transform : \"rotate(\" + tiltValues.rotation + \"deg) skewX(\" + tiltValues.skew + \"deg)\"\r\n    };\r\n\r\n    return (\r\n        <div className={TiltButtonClass}>\r\n            <div className=\"outer\">\r\n                <div className=\"tilt\">\r\n                    <div className=\"inner\" style={tiltStyle} />\r\n                </div>\r\n\r\n                <div className=\"inner\">\r\n                    {generateTiltButton()}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nexport default TiltButton;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}