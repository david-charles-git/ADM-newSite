{"ast":null,"code":"/*\r\n    Project : AddMustard\r\n    Author(s) : David Charles\r\n*/\n\n//Dependencies\n\n//Functions\nexport const generateRandomNumber = function () {\n  let min = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  let max = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\nexport const generateTiltValues = function () {\n  let maxRotation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  let maxSkew = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  /*\r\n      Creates a random value between -maxTiltVale and +maxTiltValue\r\n      Take random Number between -maxTiltVale and +maxTiltVale\r\n      Multiply the Number by -1 to the power of 1 or 2 (generated randomly)\r\n  */\n\n  const rotation = generateRandomNumber(-1 * maxRotation, maxRotation) * Math.pow(-1, generateRandomNumber(1, 2));\n  const skew = generateRandomNumber(-1 * maxSkew, maxSkew) * Math.pow(-1, generateRandomNumber(1, 2));\n  const tiltValues = {\n    rotation: rotation,\n    skew: skew\n  };\n  return tiltValues;\n};","map":{"version":3,"names":["generateRandomNumber","min","max","Math","floor","random","generateTiltValues","maxRotation","maxSkew","rotation","pow","skew","tiltValues"],"sources":["C:/Users/dms_2/Documents/AddMustard-repos/addMusatrd/client/src/Utilities/helpers.ts"],"sourcesContent":["/*\r\n    Project : AddMustard\r\n    Author(s) : David Charles\r\n*/\r\n\r\n//Dependencies\r\nimport { TiltValueInterface } from \"./helperInterfaces\";\r\n\r\n//Functions\r\nexport const generateRandomNumber : (min : number, max : number) => number = (min = 0, max = 100) => {\r\n    return (\r\n        Math.floor( ( Math.random() * (max - min + 1) ) + min )\r\n    )\r\n}\r\n\r\nexport const generateTiltValues : (maxRotation : number, maxSkew : number) => TiltValueInterface = (maxRotation = 0, maxSkew = 0) => {\r\n    /*\r\n        Creates a random value between -maxTiltVale and +maxTiltValue\r\n        Take random Number between -maxTiltVale and +maxTiltVale\r\n        Multiply the Number by -1 to the power of 1 or 2 (generated randomly)\r\n    */\r\n    \r\n    const rotation : number = generateRandomNumber((-1) * maxRotation, maxRotation) * Math.pow(-1, generateRandomNumber(1, 2));\r\n    const skew : number = generateRandomNumber((-1) * maxSkew, maxSkew) * Math.pow(-1, generateRandomNumber(1, 2));\r\n\r\n    const tiltValues : TiltValueInterface = {\r\n        rotation : rotation,\r\n        skew : skew\r\n    };\r\n\r\n    return tiltValues;\r\n};"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;;AAGA;AACA,OAAO,MAAMA,oBAA6D,GAAG,YAAwB;EAAA,IAAvBC,GAAG,uEAAG,CAAC;EAAA,IAAEC,GAAG,uEAAG,GAAG;EAC5F,OACIC,IAAI,CAACC,KAAK,CAAID,IAAI,CAACE,MAAM,EAAE,IAAIH,GAAG,GAAGD,GAAG,GAAG,CAAC,CAAC,GAAKA,GAAG,CAAE;AAE/D,CAAC;AAED,OAAO,MAAMK,kBAAmF,GAAG,YAAkC;EAAA,IAAjCC,WAAW,uEAAG,CAAC;EAAA,IAAEC,OAAO,uEAAG,CAAC;EAC5H;AACJ;AACA;AACA;AACA;;EAEI,MAAMC,QAAiB,GAAGT,oBAAoB,CAAE,CAAC,CAAC,GAAIO,WAAW,EAAEA,WAAW,CAAC,GAAGJ,IAAI,CAACO,GAAG,CAAC,CAAC,CAAC,EAAEV,oBAAoB,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EAC1H,MAAMW,IAAa,GAAGX,oBAAoB,CAAE,CAAC,CAAC,GAAIQ,OAAO,EAAEA,OAAO,CAAC,GAAGL,IAAI,CAACO,GAAG,CAAC,CAAC,CAAC,EAAEV,oBAAoB,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EAE9G,MAAMY,UAA+B,GAAG;IACpCH,QAAQ,EAAGA,QAAQ;IACnBE,IAAI,EAAGA;EACX,CAAC;EAED,OAAOC,UAAU;AACrB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}