{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dms_2\\\\Documents\\\\AddMustard-repos\\\\addMusatrd\\\\client\\\\src\\\\Components\\\\Cards\\\\BlogCard.tsx\";\n/*\r\n    Project : AddMustard\r\n    Author(s) : David Charles\r\n*/\n\n//Dependencies\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { generateTiltValues } from \"../../Utilities/helpers\";\n\n//Componenets\nimport TiltButton from \"../Buttons/TiltButton\";\nimport TiltImageContainer from \"../ImageContainers/TiltImageContainer\";\n\n//Styles\nimport \"./Cards.scss\";\n\n//Interfaces\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n//Component\nconst BlogCard = props => {\n  //Properties\n  const cardClass = props.data.cardClass;\n  const cardTitle = props.data.cardTitle;\n  const cardCopy = props.data.cardCopy;\n  const cardImage = props.data.cardImage;\n  const cardImageAlt = props.data.cardImageAlt;\n  const cardTags = props.data.cardTags || [];\n  const cardLinkCopy = props.data.cardLinkCopy;\n  const cardLinkType = props.data.cardLinkType;\n  const cardLinkHref = props.data.cardLinkHref || \"\";\n  const cardBackgroundColor = props.data.cardBackgroundColor;\n\n  //Fucntions\n  const getTagHref = tag => {\n    const tagBaseHref = \"\";\n    var tagHref = tagBaseHref + tag + \"/\";\n    return tagHref;\n  };\n  const getTagBackgroundColor = tag => {\n    var tagbackgroundColor = \"\";\n    if (tag === \"brand\") {\n      tagbackgroundColor = \"#F0BEC9\";\n    } else if (tag === \"marketing\") {\n      tagbackgroundColor = \"#F27250\";\n    } else if (tag === \"technology\") {\n      tagbackgroundColor = \"#84A9B5\";\n    }\n    return tagbackgroundColor;\n  };\n  const generateBlogCardContent = () => {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"contentContainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tilt\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"inner\",\n            style: tiltStyle\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"inner\",\n          children: [cardTitle ? /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: cardTitle\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 39\n          }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), cardCopy ? /*#__PURE__*/_jsxDEV(\"p\", {\n            children: cardCopy\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 38\n          }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), cardTags.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"tagContainer\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"inner\",\n              children: cardTags.map((tag, key) => {\n                return /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"tag\",\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"inner\",\n                    children: /*#__PURE__*/_jsxDEV(TiltButton, {\n                      data: {\n                        buttonCopy: tag,\n                        buttonType: \"internalLink\",\n                        buttonHref: getTagHref(tag),\n                        tiltBackgroundColor: getTagBackgroundColor(tag)\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 82,\n                      columnNumber: 61\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 81,\n                    columnNumber: 57\n                  }, this)\n                }, key, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 80,\n                  columnNumber: 53\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 33\n          }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this), cardImage ? /*#__PURE__*/_jsxDEV(TiltImageContainer, {\n        data: {\n          imageSource: cardImage,\n          imageAlt: cardImageAlt,\n          imageHrefType: \"externalLink\",\n          imageHref: \"\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), /*#__PURE__*/_jsxDEV(TiltButton, {\n        data: {\n          buttonClass: \"\",\n          buttonCopy: cardLinkCopy,\n          buttonIcon: \"\",\n          buttonType: cardLinkType,\n          buttonHref: cardLinkHref,\n          buttonFunction: () => {},\n          tiltBackgroundColor: \"#FFF\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  };\n  const generateBlogCardInterior = () => {\n    if (cardLinkHref) {\n      if (cardLinkType === \"internalLink\") {\n        return /*#__PURE__*/_jsxDEV(Link, {\n          className: innerClassName,\n          to: cardLinkHref,\n          children: generateBlogCardContent()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 21\n        }, this);\n      } else if (cardLinkType === \"externalLink\") {\n        return /*#__PURE__*/_jsxDEV(\"a\", {\n          className: innerClassName,\n          href: cardLinkHref,\n          rel: \"noreferrer\",\n          target: \"_blank\",\n          children: generateBlogCardContent()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 21\n        }, this);\n      }\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: innerClassName,\n      children: generateBlogCardContent()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }, this);\n  };\n\n  //Variables\n  const BlogCardClass = cardClass ? \"BlogCard \" + cardClass : \"BlogCard\";\n  const innerClassName = cardImage ? \"inner withImage\" : \"inner\";\n  const tiltValueProps = {\n    maxRotation: 1,\n    maxSkew: 2\n  };\n  const tiltValues = generateTiltValues(tiltValueProps);\n  const tiltStyle = {\n    backgroundColor: cardBackgroundColor,\n    transform: \"rotate(\" + tiltValues.rotation + \"deg) skewX(\" + tiltValues.skew + \"deg)\"\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: BlogCardClass,\n    children: generateBlogCardInterior()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 9\n  }, this);\n};\n_c = BlogCard;\nexport default BlogCard;\nvar _c;\n$RefreshReg$(_c, \"BlogCard\");","map":{"version":3,"names":["React","Link","generateTiltValues","TiltButton","TiltImageContainer","BlogCard","props","cardClass","data","cardTitle","cardCopy","cardImage","cardImageAlt","cardTags","cardLinkCopy","cardLinkType","cardLinkHref","cardBackgroundColor","getTagHref","tag","tagBaseHref","tagHref","getTagBackgroundColor","tagbackgroundColor","generateBlogCardContent","tiltStyle","length","map","key","buttonCopy","buttonType","buttonHref","tiltBackgroundColor","imageSource","imageAlt","imageHrefType","imageHref","buttonClass","buttonIcon","buttonFunction","generateBlogCardInterior","innerClassName","BlogCardClass","tiltValueProps","maxRotation","maxSkew","tiltValues","backgroundColor","transform","rotation","skew"],"sources":["C:/Users/dms_2/Documents/AddMustard-repos/addMusatrd/client/src/Components/Cards/BlogCard.tsx"],"sourcesContent":["/*\r\n    Project : AddMustard\r\n    Author(s) : David Charles\r\n*/\r\n\r\n//Dependencies\r\nimport React from \"react\";\r\nimport { Link, LinkProps } from \"react-router-dom\";\r\nimport { generateTiltValues } from \"../../Utilities/helpers\";\r\n\r\n//Componenets\r\nimport TiltButton from \"../Buttons/TiltButton\";\r\nimport TiltImageContainer from \"../ImageContainers/TiltImageContainer\";\r\n\r\n//Styles\r\nimport \"./Cards.scss\";\r\n\r\n//Interfaces\r\nimport { BlogCardInterface } from \"./CardInterfaces\"; \r\nimport { GenerateTiltValuesParametersInterface, TiltValueInterface } from \"../../Utilities/helperInterfaces\";\r\nimport { TiltButtonStyleInterface } from \"../Buttons/ButtonInterfaces\";\r\n\r\n//Component\r\nconst BlogCard : React.FC<BlogCardInterface> = (props : BlogCardInterface) => {\r\n    //Properties\r\n    const cardClass : string | undefined = props.data.cardClass; \r\n    const cardTitle : string | undefined = props.data.cardTitle;\r\n    const cardCopy : string | undefined = props.data.cardCopy;\r\n    const cardImage : string | undefined = props.data.cardImage;\r\n    const cardImageAlt : string | undefined = props.data.cardImageAlt;\r\n    const cardTags : Array<string> = props.data.cardTags || [];\r\n    const cardLinkCopy : string | undefined = props.data.cardLinkCopy;\r\n    const cardLinkType : string | undefined = props.data.cardLinkType;\r\n    const cardLinkHref : string | LinkProps[\"to\"] = props.data.cardLinkHref || \"\";\r\n    const cardBackgroundColor : string | undefined = props.data.cardBackgroundColor;\r\n\r\n    //Fucntions\r\n    const getTagHref : (tag : string) => string = (tag) => {\r\n        const tagBaseHref : string = \"\";\r\n        var tagHref : string = tagBaseHref + tag + \"/\";\r\n\r\n        return tagHref;\r\n    };\r\n    const getTagBackgroundColor : (tag : string) => string = (tag) => {\r\n        var tagbackgroundColor : string = \"\";\r\n\r\n        if (tag === \"brand\") {\r\n            tagbackgroundColor = \"#F0BEC9\";\r\n\r\n        } else if (tag === \"marketing\") {\r\n            tagbackgroundColor = \"#F27250\";\r\n\r\n        } else if (tag === \"technology\") {\r\n            tagbackgroundColor = \"#84A9B5\";\r\n\r\n        }\r\n        \r\n        return tagbackgroundColor;\r\n    };\r\n    const generateBlogCardContent : () => JSX.Element = () => {\r\n        return (\r\n            <>\r\n                <div className=\"contentContainer\">\r\n                    <div className=\"tilt\">\r\n                        <div className=\"inner\" style={tiltStyle} />\r\n                    </div>\r\n\r\n                    <div className=\"inner\">\r\n                        { cardTitle ? <h3>{cardTitle}</h3> : <></> }\r\n\r\n                        { cardCopy ? <p>{cardCopy}</p> : <></> }\r\n                            \r\n                        {\r\n                            cardTags.length > 0 ?\r\n                                <div className=\"tagContainer\">\r\n                                    <div className=\"inner\">\r\n                                        {\r\n                                            cardTags.map((tag : string, key : number) => {\r\n                                                return (\r\n                                                    <div key={key} className=\"tag\">\r\n                                                        <div className=\"inner\">\r\n                                                            <TiltButton data={{\r\n                                                                 buttonCopy : tag,\r\n                                                                 buttonType : \"internalLink\",\r\n                                                                 buttonHref : getTagHref(tag),\r\n                                                                 tiltBackgroundColor : getTagBackgroundColor(tag)\r\n                                                            }} />\r\n                                                        </div>\r\n                                                    </div>\r\n                                                )\r\n                                            })\r\n                                        }\r\n                                    </div>\r\n                                </div>\r\n                                :\r\n                                <></>\r\n                        }\r\n                    </div>\r\n                </div>\r\n\r\n                {\r\n                    cardImage ?\r\n                        <TiltImageContainer data={{ imageSource: cardImage, imageAlt: cardImageAlt, imageHrefType : \"externalLink\", imageHref: \"\" }} />\r\n                        :\r\n                        <></>\r\n                }\r\n\r\n                <TiltButton data={{\r\n                    buttonClass : \"\",\r\n                    buttonCopy : cardLinkCopy,\r\n                    buttonIcon : \"\",\r\n                    buttonType : cardLinkType,\r\n                    buttonHref : cardLinkHref,\r\n                    buttonFunction : () => {},\r\n                    tiltBackgroundColor : \"#FFF\"\r\n                }} />\r\n            </>\r\n        )\r\n    };\r\n    const generateBlogCardInterior : () => JSX.Element = () => {\r\n        if (cardLinkHref) {\r\n            if (cardLinkType === \"internalLink\") {\r\n                return (\r\n                    <Link className={innerClassName} to={cardLinkHref}>\r\n                        { generateBlogCardContent() }\r\n                    </Link>\r\n                )\r\n\r\n            } else if (cardLinkType === \"externalLink\") {\r\n                return (\r\n                    <a className={innerClassName} href={cardLinkHref} rel=\"noreferrer\" target=\"_blank\">\r\n                        { generateBlogCardContent() }\r\n                    </a>\r\n                )\r\n\r\n            }\r\n        }\r\n        \r\n        return (\r\n            <div className={innerClassName}>\r\n                { generateBlogCardContent() }\r\n            </div>\r\n        )\r\n    };\r\n\r\n    //Variables\r\n    const BlogCardClass : string = cardClass ? \"BlogCard \" + cardClass : \"BlogCard\";\r\n    const innerClassName : string = cardImage ? \"inner withImage\" : \"inner\";\r\n    const tiltValueProps : GenerateTiltValuesParametersInterface = {\r\n        maxRotation : 1,\r\n        maxSkew : 2\r\n    };\r\n    const tiltValues : TiltValueInterface = generateTiltValues(tiltValueProps);\r\n    const tiltStyle : TiltButtonStyleInterface = {\r\n        backgroundColor : cardBackgroundColor,\r\n        transform : \"rotate(\" + tiltValues.rotation + \"deg) skewX(\" + tiltValues.skew + \"deg)\"\r\n    };\r\n\r\n    return (\r\n        <div className={BlogCardClass}>\r\n            { generateBlogCardInterior () }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default BlogCard;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}