{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = createContentfulApi;\nvar _contentfulSdkCore = require(\"contentful-sdk-core\");\nvar _entities = _interopRequireDefault(require(\"./entities\"));\nvar _pagedSync = _interopRequireDefault(require(\"./paged-sync\"));\nvar _normalizeSelect = _interopRequireDefault(require(\"./utils/normalize-select\"));\nvar _validateTimestamp = _interopRequireDefault(require(\"./utils/validate-timestamp\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return typeof key === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n  if (typeof input !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (typeof res !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nconst ASSET_KEY_MAX_LIFETIME = 48 * 60 * 60;\n\n/**\r\n * Creates API object with methods to access functionality from Contentful's\r\n * Delivery API\r\n * @private\r\n * @param {Object} params - API initialization params\r\n * @prop {Object} http - HTTP client instance\r\n * @prop {Object} entities - Object with wrapper methods for each kind of entity\r\n * @prop {Function} getGlobalOptions - Link resolver preconfigured with global setting\r\n * @return {ClientAPI}\r\n */\nfunction createContentfulApi(_ref) {\n  let {\n    http,\n    getGlobalOptions\n  } = _ref;\n  const {\n    wrapSpace\n  } = _entities.default.space;\n  const {\n    wrapContentType,\n    wrapContentTypeCollection\n  } = _entities.default.contentType;\n  const {\n    wrapEntry,\n    wrapEntryCollection\n  } = _entities.default.entry;\n  const {\n    wrapAsset,\n    wrapAssetCollection\n  } = _entities.default.asset;\n  const {\n    wrapTag,\n    wrapTagCollection\n  } = _entities.default.tag;\n  const {\n    wrapAssetKey\n  } = _entities.default.assetKey;\n  const {\n    wrapLocaleCollection\n  } = _entities.default.locale;\n  const notFoundError = id => {\n    const error = new Error('The resource could not be found.');\n    error.sys = {\n      type: 'Error',\n      id: 'NotFound'\n    };\n    error.details = {\n      type: 'Entry',\n      id: id,\n      environment: getGlobalOptions().environment,\n      space: getGlobalOptions().space\n    };\n    return error;\n  };\n\n  /**\r\n   * Gets the Space which the client is currently configured to use\r\n   * @memberof ContentfulClientAPI\r\n   * @return {Promise<Entities.Space>} Promise for a Space\r\n   * @example\r\n   * const contentful = require('contentful')\r\n   *\r\n   * const client = contentful.createClient({\r\n   *   space: '<space_id>',\r\n   *   accessToken: '<content_delivery_api_key>'\r\n   * })\r\n   * // returns the space object with the above <space-id>\r\n   * const space = await client.getSpace()\r\n   * console.log(space)\r\n   */\n  async function getSpace() {\n    switchToSpace(http);\n    try {\n      const response = await http.get('/');\n      return wrapSpace(response.data);\n    } catch (error) {\n      (0, _contentfulSdkCore.errorHandler)(error);\n    }\n  }\n\n  /**\r\n   * Gets a Content Type\r\n   * @memberof ContentfulClientAPI\r\n   * @param  {string} id\r\n   * @return {Promise<Entities.ContentType>} Promise for a Content Type\r\n   * @example\r\n   * const contentful = require('contentful')\r\n   *\r\n   * const client = contentful.createClient({\r\n   *   space: '<space_id>',\r\n   *   accessToken: '<content_delivery_api_key>'\r\n   * })\r\n   *\r\n   * const contentType = await client.getContentType('<content_type_id>')\r\n   * console.log(contentType)\r\n   */\n  async function getContentType(id) {\n    switchToEnvironment(http);\n    try {\n      const response = await http.get(`content_types/${id}`);\n      return wrapContentType(response.data);\n    } catch (error) {\n      (0, _contentfulSdkCore.errorHandler)(error);\n    }\n  }\n\n  /**\r\n   * Gets a collection of Content Types\r\n   * @memberof ContentfulClientAPI\r\n   * @param  {Object=} query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\r\n   * @return {Promise<Entities.ContentTypeCollection>} Promise for a collection of Content Types\r\n   * @example\r\n   * const contentful = require('contentful')\r\n   *\r\n   * const client = contentful.createClient({\r\n   *   space: '<space_id>',\r\n   *   accessToken: '<content_delivery_api_key>'\r\n   * })\r\n   *\r\n   * const response = await client.getContentTypes()\r\n   * console.log(response.items)\r\n   */\n  async function getContentTypes() {\n    let query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    switchToEnvironment(http);\n    try {\n      const response = await http.get('content_types', (0, _contentfulSdkCore.createRequestConfig)({\n        query: query\n      }));\n      return wrapContentTypeCollection(response.data);\n    } catch (error) {\n      (0, _contentfulSdkCore.errorHandler)(error);\n    }\n  }\n\n  /**\r\n   * Gets an Entry\r\n   * @memberof ContentfulClientAPI\r\n   * @param  {string} id\r\n   * @param  {Object=} query - Object with search parameters. In this method it's only useful for `locale`.\r\n   * @return {Promise<Entities.Entry>} Promise for an Entry\r\n   * @example\r\n   * const contentful = require('contentful')\r\n   *\r\n   * const client = contentful.createClient({\r\n   *   space: '<space_id>',\r\n   *   accessToken: '<content_delivery_api_key>'\r\n   * })\r\n   *\r\n   * const entry = await client.getEntry('<entry_id>')\r\n   * console.log(entry)\r\n   */\n  async function getEntry(id) {\n    let query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (!id) {\n      throw notFoundError(id);\n    }\n    try {\n      const response = await this.getEntries(_objectSpread({\n        'sys.id': id\n      }, query));\n      if (response.items.length > 0) {\n        return wrapEntry(response.items[0]);\n      } else {\n        throw notFoundError(id);\n      }\n    } catch (error) {\n      (0, _contentfulSdkCore.errorHandler)(error);\n    }\n  }\n\n  /**\r\n   * Gets a collection of Entries\r\n   * @memberof ContentfulClientAPI\r\n   * @param  {Object=} query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\r\n   * @return {Promise<Entities.EntryCollection>} Promise for a collection of Entries\r\n   * @example\r\n   * const contentful = require('contentful')\r\n   *\r\n   * const client = contentful.createClient({\r\n   *   space: '<space_id>',\r\n   *   accessToken: '<content_delivery_api_key>'\r\n   * })\r\n   *\r\n   * const response = await client.getEntries()\r\n   * console.log(response.items)\r\n   */\n  async function getEntries() {\n    let query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    switchToEnvironment(http);\n    const {\n      resolveLinks,\n      removeUnresolved\n    } = getGlobalOptions(query);\n    query = (0, _normalizeSelect.default)(query);\n    try {\n      const response = await http.get('entries', (0, _contentfulSdkCore.createRequestConfig)({\n        query: query\n      }));\n      return wrapEntryCollection(response.data, {\n        resolveLinks,\n        removeUnresolved\n      });\n    } catch (error) {\n      (0, _contentfulSdkCore.errorHandler)(error);\n    }\n  }\n  /**\r\n   * Gets an Asset\r\n   * @memberof ContentfulClientAPI\r\n   * @param  {string} id\r\n   * @param  {Object=} query - Object with search parameters. In this method it's only useful for `locale`.\r\n   * @return {Promise<Entities.Asset>} Promise for an Asset\r\n   * @example\r\n   * const contentful = require('contentful')\r\n   *\r\n   * const client = contentful.createClient({\r\n   *   space: '<space_id>',\r\n   *   accessToken: '<content_delivery_api_key>'\r\n   * })\r\n   *\r\n   * const asset = await client.getAsset('<asset_id>')\r\n   * console.log(asset)\r\n   */\n  async function getAsset(id) {\n    let query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    switchToEnvironment(http);\n    query = (0, _normalizeSelect.default)(query);\n    try {\n      const response = await http.get(`assets/${id}`, (0, _contentfulSdkCore.createRequestConfig)({\n        query: query\n      }));\n      return wrapAsset(response.data);\n    } catch (error) {\n      (0, _contentfulSdkCore.errorHandler)(error);\n    }\n  }\n\n  /**\r\n   * Gets a collection of Assets\r\n   * @memberof ContentfulClientAPI\r\n   * @param  {Object=} query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\r\n   * @return {Promise<Entities.AssetCollection>} Promise for a collection of Assets\r\n   * @example\r\n   * const contentful = require('contentful')\r\n   *\r\n   * const client = contentful.createClient({\r\n   *   space: '<space_id>',\r\n   *   accessToken: '<content_delivery_api_key>'\r\n   * })\r\n   *\r\n   * const response = await client.getAssets()\r\n   * console.log(response.items)\r\n   */\n  async function getAssets() {\n    let query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    switchToEnvironment(http);\n    query = (0, _normalizeSelect.default)(query);\n    try {\n      const response = await http.get('assets', (0, _contentfulSdkCore.createRequestConfig)({\n        query: query\n      }));\n      return wrapAssetCollection(response.data);\n    } catch (error) {\n      (0, _contentfulSdkCore.errorHandler)(error);\n    }\n  }\n\n  /**\r\n   * Gets a Tag\r\n   * @memberof ContentfulClientAPI\r\n   * @param  {string} id\r\n   * @return {Promise<Entities.Tag>} Promise for a Tag\r\n   * @example\r\n   * const contentful = require('contentful')\r\n   *\r\n   * const client = contentful.createClient({\r\n   *   space: '<space_id>',\r\n   *   accessToken: '<content_delivery_api_key>'\r\n   * })\r\n   *\r\n   * const tag = await client.getTag('<asset_id>')\r\n   * console.log(tag)\r\n   */\n  async function getTag(id) {\n    switchToEnvironment(http);\n    try {\n      const response = await http.get(`tags/${id}`);\n      return wrapTag(response.data);\n    } catch (error) {\n      (0, _contentfulSdkCore.errorHandler)(error);\n    }\n  }\n\n  /**\r\n   * Gets a collection of Tags\r\n   * @memberof ContentfulClientAPI\r\n   * @param  {Object=} query - Object with search parameters.\r\n   * @return {Promise<Entities.TagCollection>} Promise for a collection of Tags\r\n   * @example\r\n   * const contentful = require('contentful')\r\n   *\r\n   * const client = contentful.createClient({\r\n   *   space: '<space_id>',\r\n   *   accessToken: '<content_delivery_api_key>'\r\n   * })\r\n   *\r\n   * const response = await client.getTags()\r\n   * console.log(response.items)\r\n   */\n  async function getTags() {\n    let query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    switchToEnvironment(http);\n    query = (0, _normalizeSelect.default)(query);\n    try {\n      const response = await http.get('tags', (0, _contentfulSdkCore.createRequestConfig)({\n        query: query\n      }));\n      return wrapTagCollection(response.data);\n    } catch (error) {\n      (0, _contentfulSdkCore.errorHandler)(error);\n    }\n  }\n\n  /**\r\n   * Creates an asset key for signing asset URLs (Embargoed Assets)\r\n   * @memberof ContentfulClientAPI\r\n   * @param {number} expiresAt - UNIX timestamp in the future, maximum of 48h from now\r\n   * @return {Promise<Entities.AssetKey>} Promise for an AssetKey\r\n   * @example\r\n   * const contentful = require('contentful')\r\n   *\r\n   * const client = contentful.createClient({\r\n   *   space: '<space_id>',\r\n   *   accessToken: '<content_delivery_api_key>'\r\n   * })\r\n   *\r\n   * const assetKey = await client.getAssetKey(<UNIX timestamp>)\r\n   * console.log(assetKey)\r\n   */\n  async function createAssetKey(expiresAt) {\n    switchToEnvironment(http);\n    try {\n      const now = Math.floor(Date.now() / 1000);\n      const currentMaxLifetime = now + ASSET_KEY_MAX_LIFETIME;\n      (0, _validateTimestamp.default)('expiresAt', expiresAt, {\n        maximum: currentMaxLifetime,\n        now\n      });\n      const params = {\n        expiresAt\n      };\n      const response = await http.post('asset_keys', params);\n      return wrapAssetKey(response.data);\n    } catch (error) {\n      (0, _contentfulSdkCore.errorHandler)(error);\n    }\n  }\n\n  /**\r\n   * Gets a collection of Locale\r\n   * @memberof ContentfulClientAPI\r\n   * @param  {Object=} query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\r\n   * @return {Promise<Entities.LocaleCollection>} Promise for a collection of Locale\r\n   * @example\r\n   * const contentful = require('contentful')\r\n   *\r\n   * const client = contentful.createClient({\r\n   *   space: '<space_id>',\r\n   *   accessToken: '<content_delivery_api_key>'\r\n   * })\r\n   *\r\n   * const response = await client.getLocales()\r\n   * console.log(response.items)\r\n   */\n  async function getLocales() {\n    let query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    switchToEnvironment(http);\n    try {\n      const response = await http.get('locales', (0, _contentfulSdkCore.createRequestConfig)({\n        query: query\n      }));\n      return wrapLocaleCollection(response.data);\n    } catch (error) {\n      (0, _contentfulSdkCore.errorHandler)(error);\n    }\n  }\n\n  /**\r\n   * Synchronizes either all the content or only new content since last sync\r\n   * See <a href=\"https://www.contentful.com/developers/docs/concepts/sync/\">Synchronization</a> for more information.\r\n   * <strong> Important note: </strong> The the sync api endpoint does not support include or link resolution.\r\n   * However contentful.js is doing link resolution client side if you only make an initial sync.\r\n   * For the delta sync (using nextSyncToken) it is not possible since the sdk wont have access to all the data to make such an operation.\r\n   * @memberof ContentfulClientAPI\r\n   * @param  {Object} query - Query object for the sync call. One of initial or nextSyncToken always needs to be specified, but not both.\r\n   * @param  {boolean?} query.initial - Indicates if this is the first sync. Use it if you don't have a sync token.\r\n   * @param  {string?} query.nextSyncToken - The token you got the last time you used this method. Ensures you only get changed content.\r\n   * @param  {string=} query.type - Filter by this type (all (default), Entry, Asset, Deletion, DeletedAsset or DeletedEntry)\r\n   * @param  {string=} query.content_type - Filter by this content type id\r\n   * @param  {boolean=} query.resolveLinks - When true, links to other Entries or Assets are resolved. Default: true.\r\n   * @param  {Object} options\r\n   * @param  {boolean=} [options.paginate = true] - Set to false to disable pagination\r\n   * @return {Promise<Sync.SyncCollection>} Promise for the collection resulting of a sync operation\r\n   * @example\r\n   * const contentful = require('contentful')\r\n   *\r\n   * const client = contentful.createClient({\r\n   *   space: '<space_id>',\r\n   *   accessToken: '<content_delivery_api_key>'\r\n   * })\r\n   *\r\n   * const response = await client.sync({\r\n   *   initial: true\r\n   * })\r\n   * console.log({\r\n   *   entries: response.entries,\r\n   *   assets: response.assets,\r\n   *   nextSyncToken: response.nextSyncToken\r\n   * })\r\n   */\n  async function sync() {\n    let query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      paginate: true\n    };\n    const {\n      resolveLinks,\n      removeUnresolved\n    } = getGlobalOptions(query);\n    switchToEnvironment(http);\n    return (0, _pagedSync.default)(http, query, _objectSpread({\n      resolveLinks,\n      removeUnresolved\n    }, options));\n  }\n\n  /**\r\n  * Parse raw json data into collection of entry objects.Links will be resolved also\r\n  * @memberof ContentfulClientAPI\r\n  * @param {Object} raw json data\r\n  * @example\r\n  * let data = {items: [\r\n  *    {\r\n  *    sys: {type: 'Entry', locale: 'en-US'},\r\n  *    fields: {\r\n  *      animal: {sys: {type: 'Link', linkType: 'Animal', id: 'oink'}},\r\n  *      anotheranimal: {sys: {type: 'Link', linkType: 'Animal', id: 'middle-parrot'}}\r\n  *    }\r\n  *  }\r\n  * ],\r\n  * includes: {\r\n  *  Animal: [\r\n  *    {\r\n  *      sys: {type: 'Animal', id: 'oink', locale: 'en-US'},\r\n  *      fields: {\r\n  *        name: 'Pig',\r\n  *        friend: {sys: {type: 'Link', linkType: 'Animal', id: 'groundhog'}}\r\n  *      }\r\n  *    }\r\n  *   ]\r\n  *  }\r\n  * }\r\n  * console.log( data.items[0].fields.foo ); // undefined\r\n  * let parsedData = client.parseEntries(data);\r\n  * console.log( parsedData.items[0].fields.foo ); // foo\r\n  */\n  function parseEntries(data) {\n    const {\n      resolveLinks,\n      removeUnresolved\n    } = getGlobalOptions({});\n    return wrapEntryCollection(data, {\n      resolveLinks,\n      removeUnresolved\n    });\n  }\n\n  /*\r\n   * Switches BaseURL to use /environments path\r\n   * */\n  function switchToEnvironment(http) {\n    http.defaults.baseURL = getGlobalOptions().environmentBaseUrl;\n  }\n\n  /*\r\n   * Switches BaseURL to use /spaces path\r\n   * */\n  function switchToSpace(http) {\n    http.defaults.baseURL = getGlobalOptions().spaceBaseUrl;\n  }\n  return {\n    getSpace,\n    getContentType,\n    getContentTypes,\n    getEntry,\n    getEntries,\n    getAsset,\n    getAssets,\n    getTag,\n    getTags,\n    createAssetKey,\n    getLocales,\n    parseEntries,\n    sync\n  };\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","default","createContentfulApi","_contentfulSdkCore","require","_entities","_interopRequireDefault","_pagedSync","_normalizeSelect","_validateTimestamp","obj","__esModule","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","_toPropertyKey","configurable","writable","arg","_toPrimitive","String","input","hint","prim","Symbol","toPrimitive","undefined","res","call","TypeError","Number","ASSET_KEY_MAX_LIFETIME","_ref","http","getGlobalOptions","wrapSpace","space","wrapContentType","wrapContentTypeCollection","contentType","wrapEntry","wrapEntryCollection","entry","wrapAsset","wrapAssetCollection","asset","wrapTag","wrapTagCollection","tag","wrapAssetKey","assetKey","wrapLocaleCollection","locale","notFoundError","id","error","Error","sys","type","details","environment","getSpace","switchToSpace","response","get","data","errorHandler","getContentType","switchToEnvironment","getContentTypes","query","createRequestConfig","getEntry","getEntries","items","resolveLinks","removeUnresolved","getAsset","getAssets","getTag","getTags","createAssetKey","expiresAt","now","Math","floor","Date","currentMaxLifetime","maximum","params","post","getLocales","sync","options","paginate","parseEntries","defaults","baseURL","environmentBaseUrl","spaceBaseUrl"],"sources":["C:/Users/Aaron Ormerod/Desktop/ADM-newSite/client/node_modules/contentful/dist/es-modules/create-contentful-api.js"],"sourcesContent":["\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.default = createContentfulApi;\r\nvar _contentfulSdkCore = require(\"contentful-sdk-core\");\r\nvar _entities = _interopRequireDefault(require(\"./entities\"));\r\nvar _pagedSync = _interopRequireDefault(require(\"./paged-sync\"));\r\nvar _normalizeSelect = _interopRequireDefault(require(\"./utils/normalize-select\"));\r\nvar _validateTimestamp = _interopRequireDefault(require(\"./utils/validate-timestamp\"));\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\r\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\r\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\r\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\r\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\r\nconst ASSET_KEY_MAX_LIFETIME = 48 * 60 * 60;\r\n\r\n/**\r\n * Creates API object with methods to access functionality from Contentful's\r\n * Delivery API\r\n * @private\r\n * @param {Object} params - API initialization params\r\n * @prop {Object} http - HTTP client instance\r\n * @prop {Object} entities - Object with wrapper methods for each kind of entity\r\n * @prop {Function} getGlobalOptions - Link resolver preconfigured with global setting\r\n * @return {ClientAPI}\r\n */\r\nfunction createContentfulApi(_ref) {\r\n  let {\r\n    http,\r\n    getGlobalOptions\r\n  } = _ref;\r\n  const {\r\n    wrapSpace\r\n  } = _entities.default.space;\r\n  const {\r\n    wrapContentType,\r\n    wrapContentTypeCollection\r\n  } = _entities.default.contentType;\r\n  const {\r\n    wrapEntry,\r\n    wrapEntryCollection\r\n  } = _entities.default.entry;\r\n  const {\r\n    wrapAsset,\r\n    wrapAssetCollection\r\n  } = _entities.default.asset;\r\n  const {\r\n    wrapTag,\r\n    wrapTagCollection\r\n  } = _entities.default.tag;\r\n  const {\r\n    wrapAssetKey\r\n  } = _entities.default.assetKey;\r\n  const {\r\n    wrapLocaleCollection\r\n  } = _entities.default.locale;\r\n  const notFoundError = id => {\r\n    const error = new Error('The resource could not be found.');\r\n    error.sys = {\r\n      type: 'Error',\r\n      id: 'NotFound'\r\n    };\r\n    error.details = {\r\n      type: 'Entry',\r\n      id: id,\r\n      environment: getGlobalOptions().environment,\r\n      space: getGlobalOptions().space\r\n    };\r\n    return error;\r\n  };\r\n\r\n  /**\r\n   * Gets the Space which the client is currently configured to use\r\n   * @memberof ContentfulClientAPI\r\n   * @return {Promise<Entities.Space>} Promise for a Space\r\n   * @example\r\n   * const contentful = require('contentful')\r\n   *\r\n   * const client = contentful.createClient({\r\n   *   space: '<space_id>',\r\n   *   accessToken: '<content_delivery_api_key>'\r\n   * })\r\n   * // returns the space object with the above <space-id>\r\n   * const space = await client.getSpace()\r\n   * console.log(space)\r\n   */\r\n  async function getSpace() {\r\n    switchToSpace(http);\r\n    try {\r\n      const response = await http.get('/');\r\n      return wrapSpace(response.data);\r\n    } catch (error) {\r\n      (0, _contentfulSdkCore.errorHandler)(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets a Content Type\r\n   * @memberof ContentfulClientAPI\r\n   * @param  {string} id\r\n   * @return {Promise<Entities.ContentType>} Promise for a Content Type\r\n   * @example\r\n   * const contentful = require('contentful')\r\n   *\r\n   * const client = contentful.createClient({\r\n   *   space: '<space_id>',\r\n   *   accessToken: '<content_delivery_api_key>'\r\n   * })\r\n   *\r\n   * const contentType = await client.getContentType('<content_type_id>')\r\n   * console.log(contentType)\r\n   */\r\n  async function getContentType(id) {\r\n    switchToEnvironment(http);\r\n    try {\r\n      const response = await http.get(`content_types/${id}`);\r\n      return wrapContentType(response.data);\r\n    } catch (error) {\r\n      (0, _contentfulSdkCore.errorHandler)(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets a collection of Content Types\r\n   * @memberof ContentfulClientAPI\r\n   * @param  {Object=} query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\r\n   * @return {Promise<Entities.ContentTypeCollection>} Promise for a collection of Content Types\r\n   * @example\r\n   * const contentful = require('contentful')\r\n   *\r\n   * const client = contentful.createClient({\r\n   *   space: '<space_id>',\r\n   *   accessToken: '<content_delivery_api_key>'\r\n   * })\r\n   *\r\n   * const response = await client.getContentTypes()\r\n   * console.log(response.items)\r\n   */\r\n  async function getContentTypes() {\r\n    let query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\r\n    switchToEnvironment(http);\r\n    try {\r\n      const response = await http.get('content_types', (0, _contentfulSdkCore.createRequestConfig)({\r\n        query: query\r\n      }));\r\n      return wrapContentTypeCollection(response.data);\r\n    } catch (error) {\r\n      (0, _contentfulSdkCore.errorHandler)(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets an Entry\r\n   * @memberof ContentfulClientAPI\r\n   * @param  {string} id\r\n   * @param  {Object=} query - Object with search parameters. In this method it's only useful for `locale`.\r\n   * @return {Promise<Entities.Entry>} Promise for an Entry\r\n   * @example\r\n   * const contentful = require('contentful')\r\n   *\r\n   * const client = contentful.createClient({\r\n   *   space: '<space_id>',\r\n   *   accessToken: '<content_delivery_api_key>'\r\n   * })\r\n   *\r\n   * const entry = await client.getEntry('<entry_id>')\r\n   * console.log(entry)\r\n   */\r\n  async function getEntry(id) {\r\n    let query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\r\n    if (!id) {\r\n      throw notFoundError(id);\r\n    }\r\n    try {\r\n      const response = await this.getEntries(_objectSpread({\r\n        'sys.id': id\r\n      }, query));\r\n      if (response.items.length > 0) {\r\n        return wrapEntry(response.items[0]);\r\n      } else {\r\n        throw notFoundError(id);\r\n      }\r\n    } catch (error) {\r\n      (0, _contentfulSdkCore.errorHandler)(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets a collection of Entries\r\n   * @memberof ContentfulClientAPI\r\n   * @param  {Object=} query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\r\n   * @return {Promise<Entities.EntryCollection>} Promise for a collection of Entries\r\n   * @example\r\n   * const contentful = require('contentful')\r\n   *\r\n   * const client = contentful.createClient({\r\n   *   space: '<space_id>',\r\n   *   accessToken: '<content_delivery_api_key>'\r\n   * })\r\n   *\r\n   * const response = await client.getEntries()\r\n   * console.log(response.items)\r\n   */\r\n  async function getEntries() {\r\n    let query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\r\n    switchToEnvironment(http);\r\n    const {\r\n      resolveLinks,\r\n      removeUnresolved\r\n    } = getGlobalOptions(query);\r\n    query = (0, _normalizeSelect.default)(query);\r\n    try {\r\n      const response = await http.get('entries', (0, _contentfulSdkCore.createRequestConfig)({\r\n        query: query\r\n      }));\r\n      return wrapEntryCollection(response.data, {\r\n        resolveLinks,\r\n        removeUnresolved\r\n      });\r\n    } catch (error) {\r\n      (0, _contentfulSdkCore.errorHandler)(error);\r\n    }\r\n  }\r\n  /**\r\n   * Gets an Asset\r\n   * @memberof ContentfulClientAPI\r\n   * @param  {string} id\r\n   * @param  {Object=} query - Object with search parameters. In this method it's only useful for `locale`.\r\n   * @return {Promise<Entities.Asset>} Promise for an Asset\r\n   * @example\r\n   * const contentful = require('contentful')\r\n   *\r\n   * const client = contentful.createClient({\r\n   *   space: '<space_id>',\r\n   *   accessToken: '<content_delivery_api_key>'\r\n   * })\r\n   *\r\n   * const asset = await client.getAsset('<asset_id>')\r\n   * console.log(asset)\r\n   */\r\n  async function getAsset(id) {\r\n    let query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\r\n    switchToEnvironment(http);\r\n    query = (0, _normalizeSelect.default)(query);\r\n    try {\r\n      const response = await http.get(`assets/${id}`, (0, _contentfulSdkCore.createRequestConfig)({\r\n        query: query\r\n      }));\r\n      return wrapAsset(response.data);\r\n    } catch (error) {\r\n      (0, _contentfulSdkCore.errorHandler)(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets a collection of Assets\r\n   * @memberof ContentfulClientAPI\r\n   * @param  {Object=} query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\r\n   * @return {Promise<Entities.AssetCollection>} Promise for a collection of Assets\r\n   * @example\r\n   * const contentful = require('contentful')\r\n   *\r\n   * const client = contentful.createClient({\r\n   *   space: '<space_id>',\r\n   *   accessToken: '<content_delivery_api_key>'\r\n   * })\r\n   *\r\n   * const response = await client.getAssets()\r\n   * console.log(response.items)\r\n   */\r\n  async function getAssets() {\r\n    let query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\r\n    switchToEnvironment(http);\r\n    query = (0, _normalizeSelect.default)(query);\r\n    try {\r\n      const response = await http.get('assets', (0, _contentfulSdkCore.createRequestConfig)({\r\n        query: query\r\n      }));\r\n      return wrapAssetCollection(response.data);\r\n    } catch (error) {\r\n      (0, _contentfulSdkCore.errorHandler)(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets a Tag\r\n   * @memberof ContentfulClientAPI\r\n   * @param  {string} id\r\n   * @return {Promise<Entities.Tag>} Promise for a Tag\r\n   * @example\r\n   * const contentful = require('contentful')\r\n   *\r\n   * const client = contentful.createClient({\r\n   *   space: '<space_id>',\r\n   *   accessToken: '<content_delivery_api_key>'\r\n   * })\r\n   *\r\n   * const tag = await client.getTag('<asset_id>')\r\n   * console.log(tag)\r\n   */\r\n  async function getTag(id) {\r\n    switchToEnvironment(http);\r\n    try {\r\n      const response = await http.get(`tags/${id}`);\r\n      return wrapTag(response.data);\r\n    } catch (error) {\r\n      (0, _contentfulSdkCore.errorHandler)(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets a collection of Tags\r\n   * @memberof ContentfulClientAPI\r\n   * @param  {Object=} query - Object with search parameters.\r\n   * @return {Promise<Entities.TagCollection>} Promise for a collection of Tags\r\n   * @example\r\n   * const contentful = require('contentful')\r\n   *\r\n   * const client = contentful.createClient({\r\n   *   space: '<space_id>',\r\n   *   accessToken: '<content_delivery_api_key>'\r\n   * })\r\n   *\r\n   * const response = await client.getTags()\r\n   * console.log(response.items)\r\n   */\r\n  async function getTags() {\r\n    let query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\r\n    switchToEnvironment(http);\r\n    query = (0, _normalizeSelect.default)(query);\r\n    try {\r\n      const response = await http.get('tags', (0, _contentfulSdkCore.createRequestConfig)({\r\n        query: query\r\n      }));\r\n      return wrapTagCollection(response.data);\r\n    } catch (error) {\r\n      (0, _contentfulSdkCore.errorHandler)(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates an asset key for signing asset URLs (Embargoed Assets)\r\n   * @memberof ContentfulClientAPI\r\n   * @param {number} expiresAt - UNIX timestamp in the future, maximum of 48h from now\r\n   * @return {Promise<Entities.AssetKey>} Promise for an AssetKey\r\n   * @example\r\n   * const contentful = require('contentful')\r\n   *\r\n   * const client = contentful.createClient({\r\n   *   space: '<space_id>',\r\n   *   accessToken: '<content_delivery_api_key>'\r\n   * })\r\n   *\r\n   * const assetKey = await client.getAssetKey(<UNIX timestamp>)\r\n   * console.log(assetKey)\r\n   */\r\n  async function createAssetKey(expiresAt) {\r\n    switchToEnvironment(http);\r\n    try {\r\n      const now = Math.floor(Date.now() / 1000);\r\n      const currentMaxLifetime = now + ASSET_KEY_MAX_LIFETIME;\r\n      (0, _validateTimestamp.default)('expiresAt', expiresAt, {\r\n        maximum: currentMaxLifetime,\r\n        now\r\n      });\r\n      const params = {\r\n        expiresAt\r\n      };\r\n      const response = await http.post('asset_keys', params);\r\n      return wrapAssetKey(response.data);\r\n    } catch (error) {\r\n      (0, _contentfulSdkCore.errorHandler)(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets a collection of Locale\r\n   * @memberof ContentfulClientAPI\r\n   * @param  {Object=} query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\r\n   * @return {Promise<Entities.LocaleCollection>} Promise for a collection of Locale\r\n   * @example\r\n   * const contentful = require('contentful')\r\n   *\r\n   * const client = contentful.createClient({\r\n   *   space: '<space_id>',\r\n   *   accessToken: '<content_delivery_api_key>'\r\n   * })\r\n   *\r\n   * const response = await client.getLocales()\r\n   * console.log(response.items)\r\n   */\r\n  async function getLocales() {\r\n    let query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\r\n    switchToEnvironment(http);\r\n    try {\r\n      const response = await http.get('locales', (0, _contentfulSdkCore.createRequestConfig)({\r\n        query: query\r\n      }));\r\n      return wrapLocaleCollection(response.data);\r\n    } catch (error) {\r\n      (0, _contentfulSdkCore.errorHandler)(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Synchronizes either all the content or only new content since last sync\r\n   * See <a href=\"https://www.contentful.com/developers/docs/concepts/sync/\">Synchronization</a> for more information.\r\n   * <strong> Important note: </strong> The the sync api endpoint does not support include or link resolution.\r\n   * However contentful.js is doing link resolution client side if you only make an initial sync.\r\n   * For the delta sync (using nextSyncToken) it is not possible since the sdk wont have access to all the data to make such an operation.\r\n   * @memberof ContentfulClientAPI\r\n   * @param  {Object} query - Query object for the sync call. One of initial or nextSyncToken always needs to be specified, but not both.\r\n   * @param  {boolean?} query.initial - Indicates if this is the first sync. Use it if you don't have a sync token.\r\n   * @param  {string?} query.nextSyncToken - The token you got the last time you used this method. Ensures you only get changed content.\r\n   * @param  {string=} query.type - Filter by this type (all (default), Entry, Asset, Deletion, DeletedAsset or DeletedEntry)\r\n   * @param  {string=} query.content_type - Filter by this content type id\r\n   * @param  {boolean=} query.resolveLinks - When true, links to other Entries or Assets are resolved. Default: true.\r\n   * @param  {Object} options\r\n   * @param  {boolean=} [options.paginate = true] - Set to false to disable pagination\r\n   * @return {Promise<Sync.SyncCollection>} Promise for the collection resulting of a sync operation\r\n   * @example\r\n   * const contentful = require('contentful')\r\n   *\r\n   * const client = contentful.createClient({\r\n   *   space: '<space_id>',\r\n   *   accessToken: '<content_delivery_api_key>'\r\n   * })\r\n   *\r\n   * const response = await client.sync({\r\n   *   initial: true\r\n   * })\r\n   * console.log({\r\n   *   entries: response.entries,\r\n   *   assets: response.assets,\r\n   *   nextSyncToken: response.nextSyncToken\r\n   * })\r\n   */\r\n  async function sync() {\r\n    let query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\r\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\r\n      paginate: true\r\n    };\r\n    const {\r\n      resolveLinks,\r\n      removeUnresolved\r\n    } = getGlobalOptions(query);\r\n    switchToEnvironment(http);\r\n    return (0, _pagedSync.default)(http, query, _objectSpread({\r\n      resolveLinks,\r\n      removeUnresolved\r\n    }, options));\r\n  }\r\n\r\n  /**\r\n  * Parse raw json data into collection of entry objects.Links will be resolved also\r\n  * @memberof ContentfulClientAPI\r\n  * @param {Object} raw json data\r\n  * @example\r\n  * let data = {items: [\r\n  *    {\r\n  *    sys: {type: 'Entry', locale: 'en-US'},\r\n  *    fields: {\r\n  *      animal: {sys: {type: 'Link', linkType: 'Animal', id: 'oink'}},\r\n  *      anotheranimal: {sys: {type: 'Link', linkType: 'Animal', id: 'middle-parrot'}}\r\n  *    }\r\n  *  }\r\n  * ],\r\n  * includes: {\r\n  *  Animal: [\r\n  *    {\r\n  *      sys: {type: 'Animal', id: 'oink', locale: 'en-US'},\r\n  *      fields: {\r\n  *        name: 'Pig',\r\n  *        friend: {sys: {type: 'Link', linkType: 'Animal', id: 'groundhog'}}\r\n  *      }\r\n  *    }\r\n  *   ]\r\n  *  }\r\n  * }\r\n  * console.log( data.items[0].fields.foo ); // undefined\r\n  * let parsedData = client.parseEntries(data);\r\n  * console.log( parsedData.items[0].fields.foo ); // foo\r\n  */\r\n  function parseEntries(data) {\r\n    const {\r\n      resolveLinks,\r\n      removeUnresolved\r\n    } = getGlobalOptions({});\r\n    return wrapEntryCollection(data, {\r\n      resolveLinks,\r\n      removeUnresolved\r\n    });\r\n  }\r\n\r\n  /*\r\n   * Switches BaseURL to use /environments path\r\n   * */\r\n  function switchToEnvironment(http) {\r\n    http.defaults.baseURL = getGlobalOptions().environmentBaseUrl;\r\n  }\r\n\r\n  /*\r\n   * Switches BaseURL to use /spaces path\r\n   * */\r\n  function switchToSpace(http) {\r\n    http.defaults.baseURL = getGlobalOptions().spaceBaseUrl;\r\n  }\r\n  return {\r\n    getSpace,\r\n    getContentType,\r\n    getContentTypes,\r\n    getEntry,\r\n    getEntries,\r\n    getAsset,\r\n    getAssets,\r\n    getTag,\r\n    getTags,\r\n    createAssetKey,\r\n    getLocales,\r\n    parseEntries,\r\n    sync\r\n  };\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}